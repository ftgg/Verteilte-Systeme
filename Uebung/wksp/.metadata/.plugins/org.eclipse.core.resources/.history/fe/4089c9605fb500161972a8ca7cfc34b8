package aqua.blatt1.client;

import java.net.InetSocketAddress;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Observable;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import aqua.blatt1.common.Direction;
import aqua.blatt1.common.FishModel;
import aqua.blatt1.common.msgtypes.SnapshotCollector;
import aqua.blatt1.common.msgtypes.SnapshotMarker;
import messaging.Message;

import java.util.Timer;
import java.util.TimerTask;

public class TankModel extends Observable implements Iterable<FishModel> {

	public static final int WIDTH = 600;
	public static final int HEIGHT = 350;
	protected static final int MAX_FISHIES = 7;
	protected static final Random rand = new Random();
	protected volatile String id;
	protected final Set<FishModel> fishies;
	protected int fishCounter = 0;
	protected final ClientCommunicator.ClientForwarder forwarder;
	private InetSocketAddress rightNeighbor, leftNeighbor;
	private volatile boolean hasToken = false;
	private Snapshot localSnap;
	private volatile RecordingState tankRecState = RecordingState.IDLE;
	private volatile boolean snapshotinitiator = false;
	private volatile Map<FishModel,FishReference> fishRefMap;
	
	public synchronized void initiateSnapshot() {
		localSnap = new Snapshot(fishCounter);
		snapshotinitiator = true;
		tankRecState = RecordingState.BOTH;
		forwarder.sendMarker(leftNeighbor);
		forwarder.sendMarker(rightNeighbor);
	}

	public void setRightNeighbor(InetSocketAddress rightNeighbor) {
		this.rightNeighbor = rightNeighbor;
	}

	public void setLeftNeighbor(InetSocketAddress leftNeighbor) {
		this.leftNeighbor = leftNeighbor;
	}

	public TankModel(ClientCommunicator.ClientForwarder forwarder) {
		this.fishies = Collections.newSetFromMap(new ConcurrentHashMap<FishModel, Boolean>());
		this.forwarder = forwarder;
		fishRefMap = new HashMap<FishModel,FishReference>();
	}

	synchronized void onRegistration(String id) {
		this.id = id;
		newFish(WIDTH - FishModel.getXSize(), rand.nextInt(HEIGHT - FishModel.getYSize()));
	}

	public synchronized void newFish(int x, int y) {
		if (fishies.size() < MAX_FISHIES) {
			x = x > WIDTH - FishModel.getXSize() - 1 ? WIDTH - FishModel.getXSize() - 1 : x;
			y = y > HEIGHT - FishModel.getYSize() ? HEIGHT - FishModel.getYSize() : y;

			FishModel fish = new FishModel("fish" + (++fishCounter) + "@" + getId(), x, y,
					rand.nextBoolean() ? Direction.LEFT : Direction.RIGHT);

			fishies.add(fish);
			fishRefMap.put(fish,FishReference.HERE);
		}
	}

	synchronized void receiveFish(FishModel fish) {
		fish.setToStart();
		fishies.add(fish);

		if (fish.getDirection() == Direction.LEFT)
			if (tankRecState == RecordingState.BOTH || tankRecState == RecordingState.LEFT)
				localSnap.combine(new Snapshot(1));
			else
				;
		else if (tankRecState == RecordingState.BOTH || tankRecState == RecordingState.RIGHT)
			localSnap.combine(new Snapshot(1));
		fishRefMap.put(fish,FishReference.HERE);
	}

	public synchronized void receiveMarker(InetSocketAddress sender) {
		switch (tankRecState) {
		case RIGHT:
		case LEFT:
			tankRecState = RecordingState.IDLE;
			if (snapshotinitiator) {
				// TODO das passt noch nicht!
				forwarder.sendCollector(leftNeighbor, new SnapshotCollector(localSnap));
			}
			break;

		case IDLE:
			localSnap = new Snapshot(fishCounter);
			forwarder.sendMarker(leftNeighbor);
			forwarder.sendMarker(rightNeighbor);

		case BOTH:
			if (sender.equals(rightNeighbor)) {
				tankRecState = RecordingState.LEFT;
			} else {
				tankRecState = RecordingState.RIGHT;
			}

			break;
		}

	}

	private void debug(String string) {
		System.out.println(string);
	}

	protected synchronized void receiveToken() {
		hasToken = true;
		Timer timer = new Timer();
		TimerTask task = new TimerTask() {
			public void run() {
				hasToken = false;
				forwarder.sendToken(leftNeighbor);
			}
		};
		timer.schedule(task, 2000);
	}

	protected synchronized boolean hasToken() {
		return hasToken;
	}

	public String getId() {
		return id;
	}

	public synchronized int getFishCounter() {
		return fishCounter;
	}

	public synchronized Iterator<FishModel> iterator() {
		return fishies.iterator();
	}

	private synchronized void updateFishies() {
		for (Iterator<FishModel> it = iterator(); it.hasNext();) {
			FishModel fish = it.next();

			fish.update();

			if (fish.hitsEdge()) {
				if (hasToken) {
					if (fish.getDirection() == Direction.LEFT){
						fishRefMap.put(fish,FishReference.LEFT);
						forwarder.handOff(leftNeighbor, fish);
					}else{
						fishRefMap.put(fish,FishReference.RIGHT);
						forwarder.handOff(rightNeighbor, fish);
					}
				} else {
					fish.reverse();
				}
			}

			if (fish.disappears())
				it.remove();
		}
	}

	private synchronized void update() {
		updateFishies();
		setChanged();
		notifyObservers();
	}

	protected void run() {
		forwarder.register();

		try {
			while (!Thread.currentThread().isInterrupted()) {
				update();
				TimeUnit.MILLISECONDS.sleep(10);
			}
		} catch (InterruptedException consumed) {
			// allow method to terminate
		}
	}

	public synchronized void finish() {
		forwarder.deregister(id);
	}
	
	// receive Collector in extra thread
	public synchronized void receiveCollector(SnapshotCollector snapshotCollector) {
		
		while (tankRecState != RecordingState.IDLE);
		
		if (snapshotinitiator) {
			snapshotinitiator = false;
			handleSnapshot(snapshotCollector.getSnapShot());
		} else {
			snapshotCollector.combine(localSnap);
			localSnap = new Snapshot(0);
			forwarder.sendCollector(leftNeighbor, snapshotCollector);
		}

	}

	private void handleSnapshot(Snapshot snapShot) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JOptionPane.showMessageDialog(null, "Anzahl Fische: " + snapShot.getValue());
			}
		});
	}

	public void locateFishGlobally(FishModel fish) {
		FishReference fishRef = fishRefMap.get(fish);
		if(fishRef == FishReference.HERE)
			locateFishLocally(fish);
		else if(fishRef == FishReference.LEFT)
			//TODO endpoint.send(leftNeighbor
			
	}
	
	private void locateFishLocally(FishModel fish) {
		fish.toggle();
	}
}